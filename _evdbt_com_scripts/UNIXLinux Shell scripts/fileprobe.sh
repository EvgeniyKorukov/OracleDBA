#!/bin/ksh
#============================================================================
# File:		fileprobe.sh
# Type:		Korn-shell script
# Date:		11nov03
# Author:	Tim Gorman (Evergreen Database Technologies, Inc.)
#
# Description:
#
#	Shell script to examine files related to Oracle for security
#	loopholes
#
# DISCLAIMER:	This shell script does not perform any changes to files.  It
#		is strictly "read-only", except for generating a script named
#		"fileprobe_<ORACLE_SID>_fix.sh" in the present working directory.
#
#		This script only detects possible problems and reports them.
#		For added convenience, it generates a korn-shell script
#		(mentioned above) with suggested commands that *could*
#		correct the detected problems, if they are indeed problems.
#
#		IT IS CRUCIAL THAT THE GENERATED SCRIPT BE CONSIDERED
#		ONLY AS A REPORT OF SUGGESTIONS, AND THAT IT BE REVIEWED
#		CAREFULLY BEFORE BEING CONSIDERED FOR USE.
#
#		All commands in the script are commented out for this reason.
#		To actually use the generated shell script, you must first
#		edit it to "uncomment" the generated commands, thereby
#		taking full responsibility for their use.
#
#		Neither Tim Gorman nor Evergreen Database Technologies nor
#		anyone else providing this script accept or bear any
#		responsibility, nor do they offer any warranty for the
#		use of this script, nor for any commands or scripts
#		generated by this script.
#
#		This script is only an aid.  Use it at your own risk.
#
# Modifications:
#	15apr05	TGorman	- added exceptions on SETUID and SETGID checks for
#			"$ORACLE_HOME/bin/oracle", "$ORACLE_HOME/bin/dbsnmp",
#			and "$ORACLE_HOME/dbs/orapw$ORACLE_SID" files,
#			because these files are supposed to have these
#			permissions...
#			- added exceptions on "owner" and "group" checks for
#			"lost+found" directories, which are supposed to be
#			owned by "root", not the Oracle software owner...
#			- added more disclaimers against running the generated
#			shell script without carefully reviewing and
#			understanding what the generated commands are intended
#			for...
#	27apr05	TGorman	- added restriction on check for files/dirs not
#			belonging to "dba" group to check only files
#			belonging to "oracle" user; intent is to prevent
#			unnecessary double-reporting...
#			- added more-graceful error handling when SQL*Plus
#			errors are encountered (such as Oracle instance
#			not running)...
#			- added additional check for files and directories
#			that are not writable by the Oracle software owner,
#			thus potentially causing problems during patching...
#============================================================================
_Pgm=fileprobe
_OraOsUser=oracle
_OraOsGrp=dba
integer _Rtn=0
#
#----------------------------------------------------------------------------
# Validate command-line parameters...
#----------------------------------------------------------------------------
if (( $# != 1 ))
then
	echo "Usage: \"${_Pgm}.sh ORACLE-SID\"; aborting..."
	exit 1
fi
_OraSid=$1
#
#----------------------------------------------------------------------------
# Validate command-line parameters...
#----------------------------------------------------------------------------
if [ ! -f /usr/local/bin/oraenv ]
then
	echo "Script "/usr/local/bin/oraenv" does not exist; aborting..."
	exit 1
fi
if [ ! -x /usr/local/bin/oraenv ]
then
	echo "Script "/usr/local/bin/oraenv" exists but is not executable; aborting..."
	exit 1
fi
#
#----------------------------------------------------------------------------
# Set up Oracle-specific environment variables...
#----------------------------------------------------------------------------
export ORACLE_SID=${_OraSid}
export ORAENV_ASK=NO
. /usr/local/bin/oraenv
if (( $? != 0 ))
then
	echo "Script "/usr/local/bin/oraenv" failed; aborting..."
	exit 1
fi
unset ORAENV_ASK
#
#----------------------------------------------------------------------------
# Validate the setting of important Oracle environment variables...
#----------------------------------------------------------------------------
if [[ "${ORACLE_SID}" = "" ]]
then
	echo "ORACLE_SID not set; aborting..."
	exit 1
fi
if [[ "${TWO_TASK}" != "" ]]
then
	echo "Warning: TWO_TASK set to \"${TWO_TASK}\" -- unset for duration of this script..."
	unset TWO_TASK
	integer _Rtn=1
fi
if [[ "${ORACLE_BASE}" = "" ]]
then
	echo "ORACLE_BASE not set; aborting..."
	exit 1
fi
if [ ! -d ${ORACLE_BASE} ]
then
	echo "Directory \"${ORACLE_BASE}\" not found; aborting..."
	exit 1
fi
if [[ "${ORACLE_HOME}" = "" ]]
then
	echo "ORACLE_HOME not set; aborting..."
	exit 1
fi
if [ ! -d ${ORACLE_HOME} ]
then
	echo "Directory \"${ORACLE_HOME}\" not found; aborting..."
	exit 1
fi
#
#----------------------------------------------------------------------------
# Create shell script for "fix" commands and secure it...
#----------------------------------------------------------------------------
_FixScript=${_Pgm}_${ORACLE_SID}_fix.sh
rm -f ${_FixScript}
if (( $? != 0 ))
then
	echo "\"rm -f ${_FixScript}\" failed; aborting..."
	exit 1
fi
touch ${_FixScript}
if (( $? != 0 ))
then
	echo "\"touch ${_FixScript}\" failed; aborting..."
	exit 1
fi
chmod 700 ${_FixScript}
if (( $? != 0 ))
then
	echo "\"chmod 700 ${_FixScript}\" failed; aborting..."
	exit 1
fi
echo "#!/bin/ksh"					> ${_FixScript}
echo "#"						>> ${_FixScript}
echo "# Generated by \"${_Pgm}.sh\" on `date`"		>> ${_FixScript}
echo "#"						>> ${_FixScript}
echo "# You can cause great damage running this script if you do not know what the commands do!!!" >> ${_FixScript}
echo "# Please review and approve before executing!!!"	>> ${_FixScript}
echo "#        ======     ======="			>> ${_FixScript}
echo "#"						>> ${_FixScript}
#
#----------------------------------------------------------------------------
# Issue disclaimers about the generated shell script...
#----------------------------------------------------------------------------
echo
echo "`date`: ${_Pgm} beginning for \"${_OraSid}\", assumed Oracle OS owner=\"${_OraOsUser}\", group=\"${_OraOsGrp}\"..."
echo "\tA \"fix script\" containing UNIX commands to fix problems will be generated to \"${_FixScript}\"."
echo "\tPlease review this script carefully before attempting to use it..."
echo
#
#----------------------------------------------------------------------------
# Determine if ORACLE_HOME is a subdirectory of ORACLE_BASE or not...
#----------------------------------------------------------------------------
_TempOraBase1="`dirname ${ORACLE_HOME}`"
_TempOraBase2="`dirname ${_TempOraBase1}`"
if [[ "${ORACLE_BASE}" != "${_TempOraBase2}" ]]
then
	echo 
	echo "Info: ORACLE_HOME != ORACLE_BASE/product/<version>..."
	echo 
	_SearchDirs="${ORACLE_BASE} ${ORACLE_HOME}"
else
	_SearchDirs="${ORACLE_BASE}"
fi
#
#----------------------------------------------------------------------------
# Perform file checks on important Oracle directories...
#----------------------------------------------------------------------------
echo
echo "Checking for files/directories in ORACLE_BASE and ORACLE_HOME not belonging to \"${_OraOsUser}\" user..."
for _Dir in ${_SearchDirs}
do
	for _f in `find ${_Dir} ! -user ${_OraOsUser} -print 2> /dev/null`
	do
        	if [ ! -L ${_f} ]
        	then
			if [[ "`basename ${_f}`" = "lost+found" ]]
			then
               			if [ ! -d ${_f} ]
               			then
                        		ls -l ${_f}
                        		ls -l ${_f} >> ${_FixScript}
					echo "\"${_f}\" should be a directory, not a file" >> ${_FixScript}
				fi
			else
               			if [ -d ${_f} ]
               			then
                        		ls -ld ${_f}
                		else
                        		ls -l ${_f}
                		fi
				echo "### chown ${_OraOsUser} ${_f}" >> ${_FixScript}
			fi
        	fi
		integer _Rtn=1
	done
done | sort -u
#
echo
echo "Checking for files/directories in ORACLE_BASE and ORACLE_HOME"
echo "that belong to \"${_OraOsUser}\" user but not belonging to \"${_OraOsGrp}\" group..."
for _Dir in ${_SearchDirs}
do
	for _f in `find ${_Dir} -user ${_OraOsUser} ! -group ${_OraOsGrp} -print 2> /dev/null`
	do
        	if [ ! -L ${_f} ]
        	then
			if [[ "`basename ${_f}`" = "lost+found" ]]
			then
               			if [ ! -d ${_f} ]
               			then
                        		ls -l ${_f}
                        		ls -l ${_f} >> ${_FixScript}
					echo "### \"${_f}\" should be a directory, not a file" >> ${_FixScript}
				fi
			else
                		if [ -d ${_f} ]
                		then
                        		ls -ld ${_f}
                		else
                        		ls -l ${_f}
                		fi
				echo "### chgrp ${_OraOsGrp} ${_f}" >> ${_FixScript}
			fi
        	fi
		integer _Rtn=1
	done
done | sort -u
#
echo
echo "Checking for files/directories in ORACLE_BASE and ORACLE_HOME with world-writable permissions..."
for _Dir in ${_SearchDirs}
do
	for _f in `find ${_Dir} -perm -002 -print 2> /dev/null`
	do
        	if [ ! -L ${_f} ]
        	then
                	if [ -d ${_f} ]
                	then
                        	ls -ld ${_f}
                	else
                        	ls -l ${_f}
                	fi
        	fi
		echo "### chmod o-w ${_f}" >> ${_FixScript}
		integer _Rtn=1
	done
done | sort -u
#
echo
echo "Checking for files/directories in ORACLE_BASE and ORACLE_HOME with SETUID permissions..."
for _Dir in ${_SearchDirs}
do
	for _f in `find ${_Dir} -type f -perm -4000 -print 2> /dev/null`
	do
        	if [ ! -L ${_f} ]
        	then
			if [[ "${_f}" != "${ORACLE_HOME}/bin/oracle" && \
			      "${_f}" != "${ORACLE_HOME}/bin/dbsnmp" && \
			      "${_f}" != "${ORACLE_HOME}/dbs/orapw${ORACLE_SID}" ]]
			then
                		if [ -d ${_f} ]
                		then
                        		ls -ld ${_f}
                		else
                        		ls -l ${_f}
                		fi
				echo "### chmod u-s ${_f}" >> ${_FixScript}
			fi
        	fi
		integer _Rtn=1
	done
done | sort -u
#
echo
echo "Checking for files/directories in ORACLE_BASE and ORACLE_HOME with SETGID permissions..."
for _Dir in ${_SearchDirs}
do
	for _f in `find ${_Dir} -type f -perm -2000 -print 2> /dev/null`
	do
        	if [ ! -L ${_f} ]
        	then
			if [[ "${_f}" != "${ORACLE_HOME}/bin/oracle" && \
			      "${_f}" != "${ORACLE_HOME}/bin/dbsnmp" && \
			      "${_f}" != "${ORACLE_HOME}/dbs/orapw${ORACLE_SID}" ]]
			then
                		if [ -d ${_f} ]
                		then
                        		ls -ld ${_f}
                		else
                        		ls -l ${_f}
                		fi
				echo "### chmod g-s ${_f}" >> ${_FixScript}
			fi
        	fi
		integer _Rtn=1
	done
done | sort -u
#
#----------------------------------------------------------------------------
# Attempt to connect into the database to retrieve the names of control
# files, data files, online redo log files, and archived redo log destinations
# and files...
#
# First, create a temporary file for the SQL*Plus output and secure it...
#----------------------------------------------------------------------------
_TmpFile=/tmp/${_Pgm}_${$}.tmp
rm -f ${_TmpFile}
if (( $? != 0 ))
then
	echo "\"rm -f ${_TmpFile}\" failed; aborting..."
	exit 1
fi
touch ${_TmpFile}
if (( $? != 0 ))
then
	echo "\"touch ${_TmpFile}\" failed; aborting..."
	exit 1
fi
chmod 600 ${_TmpFile}
if (( $? != 0 ))
then
	echo "\"chmod 600 ${_TmpFile}\" failed; aborting..."
	exit 1
fi
echo
echo "Using SQL*Plus to query \"${_OraSid}\" for instance-specific files and directories..."
${ORACLE_HOME}/bin/sqlplus -s "/ as sysdba" << __EOF__ >> ${_TmpFile}
whenever oserror exit failure
whenever sqlerror exit failure
set pagesize 0 lines 500 trimout on trimspool on echo off feedback off timing off pause off
col name format a200
select	'file:'||name name from v\$datafile
union
select	'file:'||name name from v\$tempfile
union
select	'file:'||member name from v\$logfile
union
select	'file:'||name name from v\$controlfile
union
select	'dir:'||destination name from v\$archive_dest where destination is not null
union
select 'dir:'||value name from v\$parameter where name like '%_dump_dest' and value is not null;
__EOF__
if (( $? == 0 ))
then
	#
	#----------------------------------------------------------------------------
	# Perform checks on Oracle database files...
	#----------------------------------------------------------------------------
	echo
	echo "Checking for Oracle database files/directories not belonging to \"${_OraOsUser}\" user..."
	for _Name in `cat ${_TmpFile}`
	do
		case "${_Name}" in
			"file:*")	_n=`echo ${_Name} | awk -F: '{print $2}'`
					_d=`dirname ${_n}`
					_f=`basename ${_n}`
					;;
			"dir:*")	_d=`echo ${_Name} | awk -F: '{print $2}'`
					_f=${_d}
					;;
		esac
		for _x in `find ${_d} -type d ! -user ${_OraOsUser} -exec ls -1d {} \; 2> /dev/null`
		do
			ls -ld ${_x}
			echo "### chown ${_OraOsUser} ${_x}" >> ${_FixScript}
			integer _Rtn=1
		done
		for _x in `find ${_d} -type f ! -user ${_OraOsUser} -exec ls -1 {} \; 2> /dev/null`
		do
			ls -l ${_x}
			echo "### chown ${_OraOsUser} ${_x}" >> ${_FixScript}
			integer _Rtn=1
		done
	done | sort -u
	#
	echo
	echo "Checking for Oracle database files/directories not belonging to \"${_OraOsGrp}\" group..."
	for _Name in `cat ${_TmpFile}`
	do
		case "${_Name}" in
			"file:*")	_n=`echo ${_Name} | awk -F: '{print $2}'`
					_d=`dirname ${_n}`
					_f=`basename ${_n}`
					;;
			"dir:*")	_d=`echo ${_Name} | awk -F: '{print $2}'`
					_f=${_d}
					;;
		esac
		for _x in `find ${_d} -type d ! -group ${_OraOsGrp} -exec ls -1d {} \; 2> /dev/null`
		do
			ls -ld ${_x}
			echo "### chgrp ${_OraOsGrp} ${_x}" >> ${_FixScript}
			integer _Rtn=1
		done
		for _x in `find ${_d} -type f ! -group ${_OraOsGrp} -exec ls -1 {} \; 2> /dev/null`
		do
			ls -l ${_x}
			echo "### chgrp ${_OraOsGrp} ${_x}" >> ${_FixScript}
			integer _Rtn=1
		done
	done | sort -u
	#
	echo
	echo "Checking for Oracle database files/directories with world-readable permissions..."
	for _Name in `cat ${_TmpFile}`
	do
		case "${_Name}" in
			"file:*")	_n=`echo ${_Name} | awk -F: '{print $2}'`
					_d=`dirname ${_n}`
					_f=`basename ${_n}`
					;;
			"dir:*")	_d=`echo ${_Name} | awk -F: '{print $2}'`
					_f=${_d}
					;;
		esac
		for _x in `find ${_d} -type d -perm -004 -exec ls -1d {} \; 2> /dev/null`
		do
			ls -l ${_x}
			echo "### chmod o-r ${_x}" >> ${_FixScript}
			integer _Rtn=1
		done
		for _x in `find ${_d} -name ${_f} -type f -perm -004 -exec ls -1 {} \; 2> /dev/null`
		do
			ls -l ${_x}
			echo "### chmod o-r ${_x}" >> ${_FixScript}
			integer _Rtn=1
		done
	done | sort -u
	#
	echo
	echo "Checking for Oracle database files/directories with world-writable permissions..."
	for _Name in `cat ${_TmpFile}`
	do
		case "${_Name}" in
			"file:*")	_n=`echo ${_Name} | awk -F: '{print $2}'`
					_d=`dirname ${_n}`
					_f=`basename ${_n}`
					;;
			"dir:*")	_d=`echo ${_Name} | awk -F: '{print $2}'`
					_f=${_d}
					;;
		esac
		for _x in `find ${_d} -type d -perm -002 -exec ls -1d {} \; 2> /dev/null`
		do
			ls -l ${_x}
			echo "### chmod o-w ${_x}" >> ${_FixScript}
			integer _Rtn=1
		done
		for _x in `find ${_d} -name ${_f} -type f -perm -002 -exec ls -1 {} \; 2> /dev/null`
		do
			ls -l ${_x}
			echo "### chmod o-w ${_x}" >> ${_FixScript}
			integer _Rtn=1
		done
	done | sort -u
	#
	echo
	echo "Checking for Oracle database files/directories with world-execute permissions..."
	for _Name in `cat ${_TmpFile}`
	do
		case "${_Name}" in
			"file:*")	_n=`echo ${_Name} | awk -F: '{print $2}'`
					_d=`dirname ${_n}`
					_f=`basename ${_n}`
					;;
			"dir:*")	_d=`echo ${_Name} | awk -F: '{print $2}'`
					_f=${_d}
					;;
		esac
		for _x in `find ${_d} -type d -perm -001 -exec ls -1d {} \; 2> /dev/null`
		do
			ls -l ${_x}
			echo "### chmod o-x ${_x}" >> ${_FixScript}
			integer _Rtn=1
		done
		for _x in `find ${_d} -name ${_f} -type f -perm -001 -exec ls -1 {} \; 2> /dev/null`
		do
			ls -l ${_x}
			echo "### chmod o-x ${_x}" >> ${_FixScript}
			integer _Rtn=1
		done
	done | sort -u
	#
	rm -f ${_TmpFile}
	#
else
	echo "\"SQL*Plus\" failed - skipping all database directory and file checks; aborting..."
	echo "============== Begin - Error Message from SQL*Plus =============="
	cat ${_TmpFile}
	echo "============== End - Error Message from SQL*Plus =============="
	rm -rf ${_TmpFile}
fi
#
#----------------------------------------------------------------------------
# Perform checks on Oracle SQL*Net files...
#----------------------------------------------------------------------------
echo 
echo "Checking basic SQL*Net configuration files within TNS_ADMIN..."
if [[ "${TNS_ADMIN}" = "" ]]
then
	echo "Warning: TNS_ADMIN not set; assuming ORACLE_HOME/network/admin instead..."
	export TNS_ADMIN=${ORACLE_HOME}/network/admin
	integer _Rtn=1
fi
#
if [ ! -d ${TNS_ADMIN} ]
then
	echo "Error: Directory \"${TNS_ADMIN}\" does not exist; aborting..."
	exit 1
fi
#
#----------------------------------------------------------------------------
# Make sure that "listener.ora" exists and is not accessible by the world at
# all...
#----------------------------------------------------------------------------
if [ ! -f ${TNS_ADMIN}/listener.ora ]
then
	echo "Warning: File \"${TNS_ADMIN}/listener.ora\" does not exist; continuing..."
	integer _Rtn=1
else
	if [ ! -r ${TNS_ADMIN}/listener.ora ]
	then
		echo "Warning: File \"${TNS_ADMIN}/listener.ora\" not readable; continuing..."
		integer _Rtn=1
	else
		#
		echo
		echo "Checking if \"listener.ora\" is accessible by \"world\"..."
		_Results="`find ${TNS_ADMIN} -name listener.ora -perm -004 -print 2> /dev/null`"
		_Results="${_Results}`find ${TNS_ADMIN} -name listener.ora -perm -002 -print 2> /dev/null`"
		_Results="${_Results}`find ${TNS_ADMIN} -name listener.ora -perm -001 -print 2> /dev/null`"
		if [[ "${_Results}" != "" ]]
		then
			echo "Warning: file \"${TNS_ADMIN}/listener.ora\" is world-accessible"
			ls -l ${TNS_ADMIN}/listener.ora
			echo "### chmod o-r ${TNS_ADMIN}/listener.ora" >> ${_FixScript}
			echo "### chmod o-w ${TNS_ADMIN}/listener.ora" >> ${_FixScript}
			echo "### chmod o-x ${TNS_ADMIN}/listener.ora" >> ${_FixScript}
			integer _Rtn=1
		fi
	fi
fi
#
#----------------------------------------------------------------------------
# Make sure that "tnsnames.ora" exists and is not writeable by the world...
#----------------------------------------------------------------------------
if [ ! -f ${TNS_ADMIN}/tnsnames.ora ]
then
	echo "Warning: File \"${TNS_ADMIN}/tnsnames.ora\" not found; continuing..."
	integer _Rtn=1
else
	if [ ! -r ${TNS_ADMIN}/tnsnames.ora ]
	then
		echo "Warning: File \"${TNS_ADMIN}/tnsnames.ora\" not readable; continuing..."
		integer _Rtn=1
	else
		echo
		echo "Checking if \"tnsnames.ora\" is writable by \"world\"..."
		_Results=`find ${TNS_ADMIN} -name tnsnames.ora -perm -002 -print 2> /dev/null`
		if [[ "${_Results}" != "" ]]
		then
			echo "Warning: file \"${TNS_ADMIN}/tnsnames.ora\" is world-writeable"
			ls -l ${TNS_ADMIN}/tnsnames.ora
			echo "### chmod o-w ${TNS_ADMIN}/tnsnames.ora" >> ${_FixScript}
			integer _Rtn=1
		fi
	fi
fi
#
#----------------------------------------------------------------------------
# Make sure that "sqlnet.ora" exists and is not writeable by the world...
#----------------------------------------------------------------------------
if [ ! -f ${TNS_ADMIN}/sqlnet.ora ]
then
	echo "Warning: File \"${TNS_ADMIN}/sqlnet.ora\" not found; continuing..."
	integer _Rtn=1
else
	if [ ! -r ${TNS_ADMIN}/sqlnet.ora ]
	then
		echo "Warning: File \"${TNS_ADMIN}/sqlnet.ora\" not readable; continuing..."
		integer _Rtn=1
	else
		echo
		echo "Checking if \"sqlnet.ora\" is writable by \"world\"..."
		_Results=`find ${TNS_ADMIN} -name sqlnet.ora -perm -002 -print 2> /dev/null`
		if [[ "${_Results}" != "" ]]
		then
			echo "Warning: file \"${TNS_ADMIN}/sqlnet.ora\" is world-writeable"
			ls -l ${TNS_ADMIN}/sqlnet.ora
			echo "### chmod o-w ${TNS_ADMIN}/sqlnet.ora" >> ${_FixScript}
			integer _Rtn=1
		fi
	fi
fi
#
#----------------------------------------------------------------------------
# Even though the Oracle Installer intentionally installs files with permissions
# which do not permit the file-owner to overwrite, it has been known to cause
# problems duing patching with the GUI Installer as well as the Perl-based
# "opatch" utility.  So, the following section identifies possible causes
# of the failure of a patch being applied.  Use your own discretion...
#----------------------------------------------------------------------------
echo
echo "Checking for files/directories in ORACLE_BASE and ORACLE_HOME without"
echo "user-writable permissions (which might cause problems during patching)..."
integer _PossiblePatchProblems=0
for _Dir in ${_SearchDirs}
do
	for _f in `find ${_Dir} -type f -user ${_OraOsUser} ! -perm -200 -print 2> /dev/null`
	do
		if (( ${_PossiblePatchProblems} == 0 ))
		then
			echo "#" >> ${_FixScript}
			echo "# These non-writable permissions were probably set by the Oracle" >> ${_FixScript}
			echo "# Installer, but they *might* cause errors during patching..." >> ${_FixScript}
			echo "#" >> ${_FixScript}
			integer _PossiblePatchProblems=1
		fi
        	if [ ! -L ${_f} ]
        	then
                	if [ -d ${_f} ]
                	then
                        	ls -ld ${_f}
                	else
                        	ls -l ${_f}
                	fi
        	fi
		echo "### chmod u+w ${_f}" >> ${_FixScript}
	done
done | sort -u
if (( ${_PossiblePatchProblems} == 1 ))
then
	echo "#" >> ${_FixScript}
	echo "# ...end of \"non-user-writable permission check\" section..." >> ${_FixScript}
	echo "#" >> ${_FixScript}
fi
#
#----------------------------------------------------------------------------
# Issue disclaimers about the generated shell script within the script itself...
#----------------------------------------------------------------------------
echo "#"							>> ${_FixScript}
echo "# You can cause great damage running this script"		>> ${_FixScript}
echo "# if you are not certain of the effects!!!"		>> ${_FixScript}
echo "#"							>> ${_FixScript}
echo "# This script is generated strictly as an advisory!!!"	>> ${_FixScript}
echo "#"							>> ${_FixScript}
echo "# REPEAT: Please review and approve if executing!!!"	>> ${_FixScript}
echo "#                ======     ======="			>> ${_FixScript}
echo "#"							>> ${_FixScript}
#
#----------------------------------------------------------------------------
# Issue more disclaimers about the generated shell script to "stdout"...
#----------------------------------------------------------------------------
echo
echo "\tA \"fix script\" containing UNIX commands to fix problems has been generated to \"${_FixScript}\"."
echo "\tREPEAT: please review this script carefully before attempting to use it..."
echo "\t                                  ========="
echo
#
#----------------------------------------------------------------------------
#
echo
if (( ${_Rtn} == 0 ))
then
	echo "`date`: ${_Pgm}.sh completed successfully for \"${_OraSid}\" without warnings."
else
	echo "`date`: ${_Pgm}.sh completed successfully for \"${_OraSid}\" with some warnings; please review output and resolve..."
fi
exit ${_Rtn}


